// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from '../node_modules/rescript-jzon/src/Jzon.bs.js'
import * as Js_dict from '../node_modules/rescript/lib/es6/js_dict.js'
import * as $$Promise from '../node_modules/@ryyppy/rescript-promise/src/Promise.bs.js'
import * as Belt_List from '../node_modules/rescript/lib/es6/belt_List.js'
import * as Belt_Option from '../node_modules/rescript/lib/es6/belt_Option.js'
import * as Belt_Result from '../node_modules/rescript/lib/es6/belt_Result.js'
import * as Caml_option from '../node_modules/rescript/lib/es6/caml_option.js'
import * as Caml_js_exceptions from '../node_modules/rescript/lib/es6/caml_js_exceptions.js'

function toPromise(str) {
  try {
    throw new Error(str)
  } catch (raw_error) {
    return Promise.reject(
      Caml_js_exceptions.internalToOCamlException(raw_error),
    )
  }
}

var committerCodecs = Jzon.object1(
  function (param) {
    return param.email
  },
  function (email) {
    return {
      TAG: /* Ok */ 0,
      _0: {
        email: email,
      },
    }
  },
  Jzon.field('Email', Jzon.string),
)

var commitCodecs = Jzon.object2(
  function (param) {
    return [param.shortMessage, param.committer]
  },
  function (param) {
    return {
      TAG: /* Ok */ 0,
      _0: {
        shortMessage: param[0],
        committer: param[1],
      },
    }
  },
  Jzon.field('ShortMessage', Jzon.string),
  Jzon.field('Commiter', committerCodecs),
)

var body = Jzon.object1(
  function (param) {
    return param.response
  },
  function (response) {
    return {
      TAG: /* Ok */ 0,
      _0: {
        response: response,
      },
    }
  },
  Jzon.field(
    'Response',
    Jzon.object1(
      function (param) {
        return param.commits
      },
      function (commits) {
        return {
          TAG: /* Ok */ 0,
          _0: {
            commits: commits,
          },
        }
      },
      Jzon.field('Commits', Jzon.array(commitCodecs)),
    ),
  ),
)

var valueUnitCodecs = Jzon.object4(
  function (param) {
    return [param.id, param.name, param.displayCode, param.currentStatusName]
  },
  function (param) {
    return {
      TAG: /* Ok */ 0,
      _0: {
        id: param[0],
        name: param[1],
        displayCode: param[2],
        currentStatusName: param[3],
      },
    }
  },
  Jzon.field('id', Jzon.string),
  Jzon.field('name', Jzon.string),
  Jzon.field('displayCode', Jzon.string),
  Jzon.field('currentStatusName', Jzon.string),
)

var body$1 = Jzon.object1(
  function (param) {
    return param.resultValue
  },
  function (resultValue) {
    return {
      TAG: /* Ok */ 0,
      _0: {
        resultValue: resultValue,
      },
    }
  },
  Jzon.field('resultValue', Jzon.array(valueUnitCodecs)),
)

function handleRequest(req) {
  var searchParams = new URL(req.url).searchParams
  var p_0 = Caml_option.nullable_to_opt(searchParams.get('startDate'))
  var p_1 = Caml_option.nullable_to_opt(searchParams.get('endDate'))
  var start = p_0
  var tmp
  if (start !== undefined) {
    var end = p_1
    tmp =
      end !== undefined
        ? {
            TAG: /* Ok */ 0,
            _0: [start, end],
          }
        : {
            TAG: /* Error */ 1,
            _0: '请求参数不完整',
          }
  } else {
    tmp = {
      TAG: /* Error */ 1,
      _0: '请求参数不完整',
    }
  }
  var resultOfFetchCommitsReqInit = Belt_Result.map(
    Belt_Result.flatMap(
      Belt_Result.map(tmp, function (param) {
        var startDate = param[0]
        var endDate = param[1]
        return {
          Action: 'DescribeGitCommits',
          DepotId: 8968222,
          PageNumber: 1,
          PageSize: 200,
          Ref: 'scrum',
          StartDate: startDate,
          EndDate: endDate,
        }
      }),
      function (payload) {
        return Belt_Option.mapWithDefault(
          JSON.stringify(payload),
          {
            TAG: /* Error */ 1,
            _0: '转换为请求体失败',
          },
          function (it) {
            return {
              TAG: /* Ok */ 0,
              _0: it,
            }
          },
        )
      },
    ),
    function (payload) {
      return {
        body: payload,
        headers: Js_dict.fromArray([
          ['Authorization', 'token ' + Token],
          ['Accept', 'application/json'],
        ]),
        method: 'POST',
      }
    },
  )
  var promiseOfFetchCommits
  if (resultOfFetchCommitsReqInit.TAG === /* Ok */ 0) {
    var __x = resultOfFetchCommitsReqInit._0
    promiseOfFetchCommits = fetch('https://e.coding.net/open-api', __x)
  } else {
    promiseOfFetchCommits = toPromise(resultOfFetchCommitsReqInit._0)
  }
  var user = searchParams.get('user')
  return $$Promise.$$catch(
    promiseOfFetchCommits
      .then(function (prim) {
        return prim.json()
      })
      .then(function (__x) {
        return Jzon.decodeWith(__x, body)
      })
      .then(function (it) {
        if (it.TAG === /* Ok */ 0) {
          return Promise.resolve(it._0.response.commits)
        } else {
          return toPromise(Jzon.DecodingError.toString(it._0))
        }
      })
      .then(
        user == null
          ? function (param) {
              return []
            }
          : function (__x) {
              return __x.filter(function (it) {
                return it.committer.email.startsWith(user)
              })
            },
      )
      .then(function (__x) {
        return __x.map(function (it) {
          return it.shortMessage
        })
      })
      .then(function (commits) {
        return commits
          .map(function (it) {
            var codeRe = /^#(?<code>\d+)\s/
            var r = codeRe.exec(it)
            if (r !== null) {
              return Caml_option.nullable_to_opt(r[1])
            }
          })
          .reduceRight(function (acc, it) {
            if (
              it !== undefined &&
              !Belt_List.has(acc, it, function (a, b) {
                return a === b
              })
            ) {
              return {
                hd: it,
                tl: acc,
              }
            } else {
              return acc
            }
          }, /* [] */ 0)
      })
      .then(function (codeList) {
        var codeArray = Belt_List.toArray(codeList)
        var payload = {
          codes: codeArray,
          orgId: '771ac1a5-fca5-4af2-b744-27b16e989b18',
        }
        return fetch(
          'https://tkb.agilean.cn/openapi/api/v1/value-units/filter?by=code',
          {
            body: Belt_Option.getWithDefault(JSON.stringify(payload), ''),
            headers: Js_dict.fromArray([['Content-Type', 'application/json']]),
            method: 'POST',
          },
        )
      })
      .then(function (prim) {
        return prim.json()
      })
      .then(function (__x) {
        return Jzon.decodeWith(__x, body$1)
      })
      .then(function (it) {
        if (it.TAG === /* Ok */ 0) {
          return Promise.resolve(it._0.resultValue)
        } else {
          return toPromise(Jzon.DecodingError.toString(it._0))
        }
      })
      .then(function (__x) {
        return __x.map(function (param, idx) {
          return (
            ((idx + 1) | 0).toString() +
            '. #' +
            param.displayCode +
            ' ' +
            param.name +
            ' 卡片状态: 「' +
            param.currentStatusName +
            '」'
          )
        })
      })
      .then(function (workArray) {
        var origin = Belt_Option.getWithDefault(
          Caml_option.nullable_to_opt(req.headers.get('Origin')),
          '*',
        )
        var headers = Js_dict.fromArray([
          ['Access-Control-Allow-Origin', origin],
          ['Content-Type', 'application/json'],
        ])
        return new Response(
          JSON.stringify(
            Js_dict.fromArray([
              ['result', 0],
              ['resultValue', workArray],
            ]),
          ),
          {
            headers: headers,
            status: 200,
            statusText: 'ok',
          },
        )
      }),
    function (error) {
      var fallbackMsg = '未知错误'
      var exn = Caml_js_exceptions.caml_as_js_exn(error)
      var message =
        exn !== undefined
          ? Belt_Option.getWithDefault(
              Caml_option.valFromOption(exn).message,
              fallbackMsg,
            )
          : fallbackMsg
      return Promise.resolve(
        new Response(message, {
          headers: {},
          status: 500,
          statusText: undefined,
        }),
      )
    },
  )
}

export { handleRequest }
/* committerCodecs Not a pure module */
